{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "..\\..\\MsfModal.svelte",
    "..\\..\\Checkbox.svelte",
    "..\\..\\Modal.svelte",
    "..\\..\\ModalContent.svelte",
    "..\\..\\NavLink.svelte"
  ],
  "sourcesContent": [
    "<script lang=\"ts\">import { createEventDispatcher } from 'svelte';\r\nimport { fade, fly } from 'svelte/transition';\r\n;\r\n// Exports\r\nexport let blocks = [];\r\n// Functions\r\nconst dispatch = createEventDispatcher();\r\n</script>\r\n\r\n<style>\r\n  .modal-overlay {\r\n    backdrop-filter: blur(0.5rem);\r\n  }\r\n</style>\r\n\r\n<div class=\"modal msf\">\r\n  <div class=\"msf-modal-content\" transition:fly={{ x: 100, duration: 250 }}>\r\n    <h3 class=\"center\">Add optional</h3>\r\n    <ul role=\"list\" class=\"msf-optional-list\">\r\n      {#each blocks as { key, title } (key)}\r\n        <li class=\"msf-optional\" on:click={() => dispatch('addoptional', key)}>\r\n          {title}\r\n        </li>\r\n      {/each}\r\n    </ul>\r\n  </div>\r\n  <div\r\n    class=\"modal-overlay\"\r\n    on:click={() => dispatch('closemodal')}\r\n    transition:fade={{ duration: 250 }} />\r\n</div>\r\n",
    "<script lang=\"ts\">// Exports\r\nexport let id, name, checked = false, label, extraClass = '';\r\n</script>\r\n\r\n<style>\r\n  input {\r\n    opacity: 0;\r\n    position: absolute;\r\n    z-index: -1;\r\n  }\r\n</style>\r\n\r\n<label class=\"w-checkbox checkbox-field flex-auto {extraClass}\">\r\n  <div\r\n    class=\"w-checkbox-input w-checkbox-input--inputType-custom checkbox\"\r\n    class:w--redirected-checked={checked} />\r\n  <input type=\"checkbox\" {id} {name} bind:checked />\r\n  <span for={name} class=\"w-form-label leading-normal\">{label}</span>\r\n</label>\r\n",
    "<script lang=\"ts\">import { disableScroll, enableScroll } from '../helpers';\r\nimport { createEventDispatcher, onMount, onDestroy } from 'svelte';\r\nimport { fade } from 'svelte/transition';\r\nimport ModalContent from './ModalContent.svelte';\r\n;\r\n;\r\n// Exports\r\nexport let slides;\r\n// Variables\r\nlet currentSlide = 0;\r\n// Functions\r\nfunction nextSlide() {\r\n    currentSlide += 1;\r\n}\r\nfunction previousSlide() {\r\n    currentSlide -= 1;\r\n}\r\nconst dispatch = createEventDispatcher();\r\nonMount(() => {\r\n    disableScroll();\r\n});\r\nonDestroy(() => {\r\n    enableScroll();\r\n});\r\n</script>\r\n\r\n<style>\r\n  .modal-overlay {\r\n    backdrop-filter: blur(0.5rem);\r\n  }\r\n</style>\r\n\r\n<div class=\"modal\">\r\n  <ModalContent\r\n    {...slides[currentSlide]}\r\n    {currentSlide}\r\n    isLast={currentSlide === slides.length - 1}\r\n    on:closemodal\r\n    on:previous={previousSlide}\r\n    on:next={() => {\r\n      if (currentSlide === slides.length - 1) dispatch('closemodal');\r\n      else nextSlide();\r\n    }} />\r\n  <div\r\n    class=\"modal-overlay\"\r\n    in:fade={{ duration: 100 }}\r\n    on:click={() => dispatch('closemodal')} />\r\n</div>\r\n",
    "<script lang=\"ts\">import { createEventDispatcher } from 'svelte';\r\nimport { fly } from 'svelte/transition';\r\nimport { quintOut } from 'svelte/easing';\r\nimport ModalCloseIcon from '../icons/modal-close-icon.svg';\r\nimport BackIcon from '../icons/back-icon.svg';\r\nimport NextIcon from '../icons/next-icon.svg';\r\n// Exports\r\nexport let currentSlide, title, content, video1, video2, isLast;\r\n// Variables\r\nlet videoElement;\r\n// Reactive\r\n$: if (video1)\r\n    restartVideo();\r\n// Functions\r\nconst dispatch = createEventDispatcher();\r\nfunction restartVideo() {\r\n    if (!videoElement)\r\n        return;\r\n    videoElement.load();\r\n}\r\n</script>\r\n\r\n<style>\r\n  .hidden {\r\n    opacity: 0;\r\n    pointer-events: none;\r\n  }\r\n  @media screen and (max-width: 767px) {\r\n    .modal-image {\r\n      -webkit-box-ordinal-group: -9998;\r\n      -webkit-order: -9999;\r\n      -ms-flex-order: -9999;\r\n      order: -9999;\r\n    }\r\n  }\r\n\r\n  video {\r\n    width: 100%;\r\n    height: auto;\r\n    border-radius: 1rem;\r\n  }\r\n</style>\r\n\r\n<div\r\n  class=\"modal-content-wrap\"\r\n  transition:fly={{ y: 100, duration: 250, easing: quintOut }}>\r\n\r\n  <div class=\"modal-content\">\r\n\r\n    <!-- Modal Content -->\r\n    <div class=\"vflex-str-s\">\r\n\r\n      <!-- Title -->\r\n      <h3 class=\"mb-2\">{title}</h3>\r\n\r\n      <!-- Divider -->\r\n      <div class=\"logic-block-divider mb-4\" />\r\n\r\n      <!-- Text -->\r\n      <div class=\"modal-text\">\r\n        {@html content}\r\n      </div>\r\n\r\n      <!-- Navigation -->\r\n      <div class=\"hflex-c-sb mt-auto\">\r\n\r\n        <!-- Back Button -->\r\n        <div\r\n          class=\"modal-nav\"\r\n          class:hidden={currentSlide === 0}\r\n          on:click={() => dispatch('previous')}>\r\n          <BackIcon class=\"icon mr-2\" />\r\n          <div class=\"uppercase\">Back</div>\r\n        </div>\r\n\r\n        <!-- Next / Finish Button -->\r\n        <div class=\"modal-nav\" on:click={() => dispatch('next')}>\r\n          <div class=\"uppercase mr-2\">{isLast ? 'Finish' : 'Next'}</div>\r\n          {#if !isLast}\r\n            <NextIcon class=\"icon\" />\r\n          {/if}\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Modal Image -->\r\n    <div class=\"vflex-str-c modal-image\">\r\n      <!-- <img src={image} alt={title} class=\"rounded-4\" /> -->\r\n\r\n      <video\r\n        autoplay={true}\r\n        loop={true}\r\n        muted={true}\r\n        playsinline={true}\r\n        bind:this={videoElement}>\r\n        <source src={video1} />\r\n        <source src={video2} />\r\n      </video>\r\n    </div>\r\n  </div>\r\n\r\n  <!-- Modal Close -->\r\n  <div class=\"modal-close\" on:click={() => dispatch('closemodal')}>\r\n    <div class=\"_w-full vflex-str-c\">\r\n      <ModalCloseIcon />\r\n    </div>\r\n  </div>\r\n</div>\r\n",
    "<script lang=\"ts\">import { currentPage } from '../stores/global';\r\n;\r\n// Exports\r\nexport let link, text, extraClass = '';\r\nimport IntroIcon from '../icons/intro-icon.svg';\r\nimport MultiStepsIcon from '../icons/multi-steps-icon.svg';\r\nimport ConditionalLogicIcon from '../icons/conditional-logic-icon.svg';\r\nimport GenerateCodeIcon from '../icons/generate-code-icon.svg';\r\n// Variables\r\nconst icons = [\r\n    IntroIcon,\r\n    MultiStepsIcon,\r\n    ConditionalLogicIcon,\r\n    GenerateCodeIcon,\r\n];\r\n</script>\r\n\r\n<style>\r\n  :global(button) {\r\n    background-color: #ffffff00;\r\n    padding: 0;\r\n  }\r\n  :global(button:focus) {\r\n    outline: none;\r\n  }\r\n</style>\r\n\r\n<button\r\n  class=\"nav-item w-inline-block {extraClass}\"\r\n  class:w--current={$currentPage === link}\r\n  on:click={() => ($currentPage = link)}>\r\n  <div class=\"nav-icon\">\r\n    <svelte:component this={icons[link]} />\r\n  </div>\r\n  <div class=\"nav-text\">{text}</div>\r\n</button>\r\n"
  ],
  "names": [],
  "mappings": "AAUE,cAAc,cAAC,CAAC,AACd,eAAe,CAAE,KAAK,MAAM,CAAC,AAC/B,CAAC;ACPD,KAAK,cAAC,CAAC,AACL,OAAO,CAAE,CAAC,CACV,QAAQ,CAAE,QAAQ,CAClB,OAAO,CAAE,EAAE,AACb,CAAC;ACkBD,cAAc,cAAC,CAAC,AACd,eAAe,CAAE,KAAK,MAAM,CAAC,AAC/B,CAAC;ACND,OAAO,eAAC,CAAC,AACP,OAAO,CAAE,CAAC,CACV,cAAc,CAAE,IAAI,AACtB,CAAC,AACD,OAAO,MAAM,CAAC,GAAG,CAAC,YAAY,KAAK,CAAC,AAAC,CAAC,AACpC,YAAY,eAAC,CAAC,AACZ,yBAAyB,CAAE,KAAK,CAChC,aAAa,CAAE,KAAK,CACpB,cAAc,CAAE,KAAK,CACrB,KAAK,CAAE,KAAK,AACd,CAAC,AACH,CAAC,AAED,KAAK,eAAC,CAAC,AACL,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,CACZ,aAAa,CAAE,IAAI,AACrB,CAAC;ACtBO,MAAM,AAAE,CAAC,AACf,gBAAgB,CAAE,SAAS,CAC3B,OAAO,CAAE,CAAC,AACZ,CAAC,AACO,YAAY,AAAE,CAAC,AACrB,OAAO,CAAE,IAAI,AACf,CAAC"
}